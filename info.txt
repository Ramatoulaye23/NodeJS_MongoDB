{ "fullname":"Ramatoulaye fainke",
  "email":"fainke@yahoo.fr", 
  "password":"fainke"
}
/////////route///////////
let express =require("express");// declaration projet expre
const router = express.Router(); // declaration constab=nce router=express.router
let ControleurUser =require("../controller/ControleurUser.js") //appel constrollerUser

router.post("/signup", ControleurUser.signup);//envoie creation dans controlleurUser
router.post("/login", ControleurUser.login);//envoie connexion

module.exports = router//obligatoire dans chaque route
////////////index//////
let express =require("express")
let mongoose =require("mongoose") //import mongoose from "mongoose"
let routeUser = require("./route/routeUser.js")//appel routeUser


let app = express();// base application let app=fonction express()
app.use(express.json());    
app.use(express.urlencoded({extended : true})); 

let URI = 'mongodb+srv://ramatoulayefainke:Almamyabsetou@cluster0.4sfbgah.mongodb.net/BDD' ; 
mongoose.connect(URI,
{ useNewUrlParser: true, useUnifiedTopology: true , dbName : "PROJETF"})
.then(()=> console.log("Connexion a Mongo réussie !"))
.catch(()=> console.log("Connexion a Mongo échouée"));


app.use("/user",routeUser)//l'application utilise la route("/user",nomfichier route:routeUser)



let port = 5200 ; //choix port
app.listen(port, ()=> console.log(`Le serveur tourne bien sur ${port}`))
////////////controlleur/////////
commencer par importer les dependances a pres les avoir installer

=>let User = require("../model/ModelUser.js")// pareil que Import user from "../model/UserModel""
=>let bcrypt = require("bcrypt");// pareil que Import bcrypt from "bcrypt"
=>let jwt = require("jsonwebtoken");//pareil que Import jwt from 

exports.signup
exports.login
exports.isLoggedIn

comme suit:


exports.login = async (req, res) => {
    try {
        let user = await User.findOne({ email: req.body.email }); 
        console.log(user)
        console.log(req.body.password)
        console.log(user.password)
        let isMatch = await bcrypt.compare(req.body.password, user.password);
        
        if (user) {
            if (isMatch) {
                res.status(200).json({
                    email : user.email, 
                    token: jwt.sign({email : user.email},'RANDOM_TOKEN_SECRET', {expiresIn: '1h'} )
                });
            } else {
                res.status(400).json({ message: "Invalid mot de pass" });
            }
        } else res.status(400).json({ message: "Invalid email" });
    } catch (err) {
        res.status(400).json({ message: err });
    }
}

exports.isLoggedIn = (req, res, next) => {
    console.log(req.headers.authorization)
    let token = req.headers.authorization.replace("hello ", "");
    jwt.verify(token, 'RANDOM_TOKEN_SECRET', function (err, payload) {// la methode verify permet de decoder le token
        if (err) {
            res.status(401).json({ message: "Unauthorized" });
        } else 
        req.payload = payload// payload permet de recupere le token
        next();
    });
};
